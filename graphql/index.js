
const { makeAugmentedSchema } = require("neo4j-graphql-js");
const { ApolloServer } = require("apollo-server");
const neo4j = require("neo4j-driver");
const dotenv = require("dotenv");
const path = require("path");
const fs = require("fs");

// Load Neo4j credentials into environment variables from .env file
dotenv.config();

// Load GraphQL type definitions from schema.graphql file
const typeDefs = fs.readFileSync(path.join(__dirname, "schema.graphql")).toString("utf-8");

// Create executable GraphQL schema from GraphQL type definitions,
// using neo4j-graphql.js to autogenerate resolvers
const schema = makeAugmentedSchema({typeDefs})

// Create Neo4j driver instance
const driver = neo4j.driver(
  process.env.NEO4J_URI,
  neo4j.auth.basic(process.env.NEO4J_USER, process.env.NEO4J_PASSWORD)
)

// Create ApolloServer instance to serve GraphQL schema
// Inject Neo4j driver instance into the context object
//  which is passed into each (autogenerated) resolver
// Start Apollo Server
const server = new ApolloServer({ schema, context: { driver } });
server.listen(3000, "0.0.0.0").then(({ url }) => {
  console.log("GraphQL API ready");
});